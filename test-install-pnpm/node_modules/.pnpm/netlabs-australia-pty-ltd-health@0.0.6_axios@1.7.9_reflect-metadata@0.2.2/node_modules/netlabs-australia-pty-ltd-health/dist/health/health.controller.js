"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthController = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const terminus_1 = require("@nestjs/terminus");
const swagger_1 = require("@nestjs/swagger");
const prometheus_service_1 = require("./prometheus.service");
let HealthController = class HealthController {
    constructor(health, http, db, memory, disk, configService, prometheusService) {
        this.health = health;
        this.http = http;
        this.db = db;
        this.memory = memory;
        this.disk = disk;
        this.configService = configService;
        this.prometheusService = prometheusService;
        this.heapThreshold =
            configService.get('MEMORY_HEAP_THRESHOLD') || 150 * 1024 * 1024;
        this.rssThreshold =
            configService.get('MEMORY_RSS_THRESHOLD') || 300 * 1024 * 1024;
    }
    async checkLiveness() {
        const healthCheck = await this.health.check([
            // Basic application health check
            () => this.memory.checkHeap('memory_heap', this.heapThreshold),
            () => this.memory.checkRSS('memory_rss', this.rssThreshold),
            // Disk space check
            () => this.disk.checkStorage('disk_space', {
                thresholdPercent: 0.9, // 90% threshold
                path: process.platform === 'win32' ? 'C:\\' : '/',
            }),
            // Database connectivity check - simple ping
            () => this.db.pingCheck('database', { timeout: 3000 }),
        ]);
        // Record metrics for monitoring
        this.prometheusService.recordHealthCheck('liveness', healthCheck.status);
        return healthCheck;
    }
    async checkReadiness() {
        const healthCheck = await this.health.check([
            // Database health check
            () => this.db.pingCheck('database', { timeout: 3000 }),
            // External dependencies health checks (if configured)
            ...this.getExternalHealthChecks(),
        ]);
        // Record metrics for monitoring
        this.prometheusService.recordHealthCheck('readiness', healthCheck.status);
        return healthCheck;
    }
    getExternalHealthChecks() {
        const externalApis = this.configService.get('EXTERNAL_APIS');
        if (!externalApis)
            return [];
        try {
            const apis = JSON.parse(externalApis);
            return apis.map((api) => () => this.http.pingCheck(`external_api_${api.name}`, api.url, {
                timeout: 5000,
            }));
        }
        catch (error) {
            console.error('Failed to parse EXTERNAL_APIS configuration:', error);
            return [];
        }
    }
};
exports.HealthController = HealthController;
__decorate([
    (0, common_1.Get)('/liveness'),
    (0, terminus_1.HealthCheck)(),
    (0, swagger_1.ApiSecurity)({ security: [] }) // Disable security for liveness check
    ,
    (0, swagger_1.ApiOperation)({ summary: 'Check if the application is alive' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Application is alive and responding to requests',
    }),
    (0, swagger_1.ApiResponse)({
        status: 503,
        description: 'Application is not responding properly',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], HealthController.prototype, "checkLiveness", null);
__decorate([
    (0, common_1.Get)('/readiness'),
    (0, terminus_1.HealthCheck)(),
    (0, swagger_1.ApiSecurity)({ security: [] }) // Disable security for readiness check
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Check if the application is ready to accept traffic',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Application is ready to accept traffic',
    }),
    (0, swagger_1.ApiResponse)({
        status: 503,
        description: 'Application is not ready to accept traffic',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], HealthController.prototype, "checkReadiness", null);
exports.HealthController = HealthController = __decorate([
    (0, swagger_1.ApiTags)('Health'),
    (0, common_1.Controller)('health'),
    __metadata("design:paramtypes", [terminus_1.HealthCheckService,
        terminus_1.HttpHealthIndicator,
        terminus_1.TypeOrmHealthIndicator,
        terminus_1.MemoryHealthIndicator,
        terminus_1.DiskHealthIndicator,
        config_1.ConfigService,
        prometheus_service_1.PrometheusService])
], HealthController);
//# sourceMappingURL=health.controller.js.map